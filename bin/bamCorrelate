#!/usr/bin/env python
#-*- coding: utf-8 -*-

import os
import sys
import argparse
import numpy as np

import deeptools.countReadsPerBin as countR
from deeptools import parserCommon
from deeptools._version import __version__


def parseArguments(args=None):
    parser = \
        argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""

bamCorrelate computes the overall similarity between two or more BAM
files based on read coverage (number of reads) within genomic regions.
The correlation analysis is performed for the entire genome by running
the program in 'bins' mode, or for certain user selected regions in 'BED-file'
mode. Because the computation of the coverage is time consuming the program
outputs an intermediary file that can then be used with the 'plotCorrelation' tool
for visualizing the correlation.


detailed help:
  %(prog)s bins -h
  %(prog)s BED-file -h

""",
           epilog='example usages:\n%(prog)s bins '
           '--bamfiles file1.bam file2.bam -out results.npz\n\n'
           '%(prog)s BED-file --BED selection.bed \n'
           '--bamfiles file1.bam file2.bam \n'
           '-out results.npz'
           ' \n\n',
            conflict_handler='resolve')

    parser.add_argument('--version', action='version',
                          version='%(prog)s {}'.format(__version__))
    subparsers = parser.add_subparsers(
        title="commands",
        dest='command',
        metavar='')

    parent_parser = parserCommon.getParentArgParse(binSize=False)
    read_options_parser = parserCommon.read_options()

    # bins mode options
    bins_mode = subparsers.add_parser(
        'bins',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        parents=[bamCorrelateArgs(case='bins'),
                 parent_parser, read_options_parser,
                 ],
        help="The correlation is based on read coverage over "
             "consecutive bins of equal "
             "size (10k bp by default). This mode is useful to assess the "
             "overall similarity of BAM files. The bin size and the "
             "distance between bins can be adjusted.",
        add_help=False,
        usage='%(prog)s '
              '--bamfiles file1.bam file2.bam '
              '-out results.npz \n')

    # BED file argumentsdi
    bed_mode = subparsers.add_parser(
        'BED-file',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        parents=[bamCorrelateArgs(case='BED-file'),
                 parent_parser, read_options_parser,
                 ],
        help="The user provides a BED file that contains all regions "
             "that should be considered for the correlation analysis. A "
             "common use is to compare ChIP-seq coverages between two "
             "different samples for a set of peak regions.",
        usage='%(prog)s --BED selection.bed'
              '--bamfiles file1.bam file2.bam '
              '-out results.npz\n',
        add_help=False)

    args = parser.parse_args(args)
    args.extendPairedEnds = False if args.doNotExtendPairedEnds else True

    if args.labels and len(args.bamfiles) != len(args.labels):
        print "The number of does not match the number of bam files."
        exit(0)
    if not args.labels:
        args.labels = map(lambda x: os.path.basename(x), args.bamfiles)

    return args


def bamCorrelateArgs(case='bins'):
    parser = argparse.ArgumentParser(add_help=False)
    required = parser.add_argument_group('Required arguments')

    # define the arguments
    required.add_argument('--bamfiles', '-b',
                        metavar='FILE1 FILE2',
                        help='List of indexed bam files separated by spaces.',
                        nargs='+',
                        required=True)

    required.add_argument('--outFileName', '-out',
                        help='File name to save the gzipped matrix file '
                        'needed by the "heatmapper" and "profiler" tools.',
                        type=argparse.FileType('w'),
                        required=True)


    optional = parser.add_argument_group('Optional arguments')

    optional.add_argument("--help", "-h", action="help",
                        help="show this help message and exit")
    optional.add_argument('--labels', '-l',
                        metavar='sample1 sample2',
                        help='User defined labels instead of default labels from '
                            'file names. '
                            'Multiple labels have to be separated by space, e.g. '
                            '--labels sample1 sample2 sample3',
                        nargs='+')

    if case == 'bins':
        optional.add_argument('--binSize', '-bs',
                        metavar='INT',
                        help='Length in base pairs for a window used '
                            'to sample the genome.',
                        default=10000,
                        type=int)

        optional.add_argument('--distanceBetweenBins', '-n',
                              metavar='INT',
                              help='By default, bamCorrelate considers consecutive '
                              'bins of the specified --binSize. However, to '
                              'reduce the computation time, a larger distance '
                              'between bins can by given. Larger distances '
                              'result in less bins being considered.',
                        default=0,
                        type=int)


        required.add_argument('--BED',
                        help=argparse.SUPPRESS,
                        default=None)
    else:
        optional.add_argument('--binSize', '-bs',
                        help=argparse.SUPPRESS,
                        default=10000,
                        type=int)

        optional.add_argument('--distanceBetweenBins', '-n',
                              help=argparse.SUPPRESS,
                              metavar='INT',
                              default=0,
                              type=int)

        required.add_argument('--BED',
                        help='Limits the correlation analysis to '
                             'the regions specified in this file.',
                        metavar='bedfile',
                        type=argparse.FileType('r'),
                        required=True)

    optional.add_argument('--includeZeros',
                        help='Genomic regions that have zero values only '
                          'are included. The default behavior is to '
                          'ignore these regions.',
                        action='store_true',
                        required=False)

    group = parser.add_argument_group('Output optional options')


    group.add_argument('--outRawCounts',
                        help='Save raw counts (coverages) to file.',
                        metavar='FILE',
                        type=argparse.FileType('w'))



    return parser


def main(args):
    """
    1. get read counts at different positions either
    all of same length or from genomic regions from the BED file

    2. save data for further plotting

    """
    if len(args.bamfiles) < 2:
        print "Please input at least two bam files to compare"
        exit(1)

    if args.includeZeros:
        skip_zeros = False
    else:
        skip_zeros = True


    if 'BED' in args:
        bed_regions = args.BED
    else:
        bed_regions = None

    stepsize = args.binSize + args.distanceBetweenBins
    c = countR.CountReadsPerBin(
        args.bamfiles,
        args.binSize,
        0,
        args.fragmentLength,
        numberOfProcessors=args.numberOfProcessors,
        skipZeros=skip_zeros,
        verbose=args.verbose,
        region=args.region,
        bedFile=bed_regions,
        extendPairedEnds=args.extendPairedEnds,
        minMappingQuality=args.minMappingQuality,
        ignoreDuplicates=args.ignoreDuplicates,
        center_read=args.centerReads,
        samFlag_include=args.samFlagInclude,
        samFlag_exclude=args.samFlagExclude,
        stepSize=stepsize)

    num_reads_per_bin = c.run()

    sys.stderr.write("Number of non zero bins "
                     "found: {}\n".format(num_reads_per_bin.shape[0]))

    if num_reads_per_bin.shape[0] < 2:
        exit("ERROR: too few non zero bins found.\n"
             "If using --region please check that this "
             "region is covered by reads.\n")
        

    if args.outRawCounts:
        args.outRawCounts.write("'" + "'\t'".join(args.labels) + "'\n")
        fmt = "\t".join(np.repeat('%d', num_reads_per_bin.shape[1])) + "\n"
        for row in num_reads_per_bin:
            args.outRawCounts.write(fmt % tuple(row))

    np.savez_compressed(args.outFileName,
             matrix=num_reads_per_bin,
             labels=args.labels)


if __name__ == "__main__":
    ARGS = parseArguments()
    main(ARGS)
