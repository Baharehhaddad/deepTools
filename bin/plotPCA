#!/usr/bin/env python
#-*- coding: utf-8 -*-

import sys
import argparse
import numpy as np
from matplotlib import use as mplt_use
mplt_use('Agg')
import matplotlib.pyplot as plt

from deeptools.correlation import Correlation
from deeptools._version import __version__

def parseArguments(args=None):
    basic_args = plotCorrelationArgs()
    #heatmap_parser = heatmap_options()
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""
Tool for generating a principal component analysis (PCA)
plot from bamCorrelate or bigwigCorrelate output.

Detailed help:

  %(prog)s -h

""",
           epilog='example usages:\n%(prog)s '
           '--results results_file -o pca.png\n\n'
           ' \n\n',
        parents=[basic_args,])

    args = parser.parse_args(args)

    return args


def plotCorrelationArgs():
    parser = argparse.ArgumentParser(add_help=False)
    required = parser.add_argument_group('Required arguments')

    # define the arguments
    required.add_argument('--corData', '-in',
                        metavar='FILE',
                        help='Correlation file generated by one of correlation programs in deepTools',
                        required=True)

    required.add_argument('--plotFile', '-o',
                        help='File name to save the plot. '
                        'The given file ending will be used '
                        'to determine the image format, for example: '
                        'pca.pdf will save the PCA plot in PDF format. '
                        'The available options are: .png, .emf, '
                        '.eps, .pdf and .svg.',
                        type=argparse.FileType('w'),
                        metavar='FILE',
                        required=True)

    optional = parser.add_argument_group('Optional arguments')
    optional.add_argument('--labels', '-l',
                        metavar='sample1 sample2',
                        help='User defined labels instead of default labels from '
                            'file names. '
                            'Multiple labels have to be separated by space, e.g. '
                            '--labels sample1 sample2 sample3',
                        nargs='+')

    optional.add_argument('--plotFileFormat',
                        metavar='FILETYPE',
                        help='Image format type. If given, this option '
                            'overrides the image format based on the plotFile '
                            'ending. The available options are: png, '
                            'eps, pdf and svg.',
                        choices=['png', 'pdf', 'svg', 'eps'])

    optional.add_argument('--version', action='version',
                          version='%(prog)s {}'.format(__version__))

    group = parser.add_argument_group('Output optional options')

    group.add_argument('--outFileCorMatrix',
                        help='Save correlation matrix to file.',
                        metavar='FILE',
                        type=argparse.FileType('w'))
    return parser


def main(args):

    corr = Correlation(args.corData,
                        labels=args.labels,)

    if args.outFileCorMatrix:
        corr.save_corr_matrix(args.outFileCorMatrix)

    args.plotFile.close()

    corr.plot_pca(args.plotFile.name, image_format=args.plotFileFormat)


if __name__ == "__main__":
    ARGS = parseArguments()
    main(ARGS)
