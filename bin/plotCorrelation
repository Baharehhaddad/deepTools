#!/usr/bin/env python
#-*- coding: utf-8 -*-

import os
import random
import sys
import argparse
import numpy as np
from matplotlib import use as mplt_use
mplt_use('Agg')
import matplotlib.pyplot as plt

from deeptools.correlation import Correlation
from deeptools._version import __version__


def parse_arguments(args=None):
    basic_args = plot_correlation_args()
    heatmap_parser = heatmap_options()
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""
Tool for visualizing a correlation using either bamCorrelate or
bigwigCorrelate. Pearson or Spearman methods are available to compute correlation
coefficients. Results can be saved into a heat map image or as multiple
scatter plots. Further output files are optional.


detailed help:

  %(prog)s -h

""",
           epilog='example usages:\n%(prog)s '
           '--results results_file --whatToPlot heatmap --corMethod pearson -o heatmap.png\n\n'
           ' \n\n',
        parents=[basic_args, heatmap_parser])

    args = parser.parse_args(args)

    return args


def plot_correlation_args():
    parser = argparse.ArgumentParser(add_help=False)
    required = parser.add_argument_group('Required arguments')

    # define the arguments
    required.add_argument('--corData', '-in',
                        metavar='FILE',
                        help='Correlation file generated by one of correlation programs in deepTools',
                        required=True)

    required.add_argument('--plotFile', '-o',
                        help='File name to save the file containing the heatmap '
                        'of the correlation. The given file ending will be used '
                        ' to determine the image format, for example: '
                        'heatmap.pdf will save the heatmap in PDF format. '
                        'The available options are: .png, .emf, '
                        '.eps, .pdf and .svg.',
                        type=argparse.FileType('w'),
                        metavar='FILE',
                        required=True)

    required.add_argument('--corMethod', '-c',
                          help="Correlation method.",
                          choices=['spearman', 'pearson'],
                          required=True)

    required.add_argument('--whatToPlot', '-p',
                          help="Choose between a heatmap or scatter plot",
                          choices=['heatmap', 'scatterplot'],
                          required=True)

    optional = parser.add_argument_group('Optional arguments')
    optional.add_argument('--skipZeros',
                        help='By setting this option, genomic regions '
                             'that have zero or nan values only all samples '
                             'are excluded.',
                        action='store_true',
                        required=False)

    optional.add_argument('--labels', '-l',
                        metavar='sample1 sample2',
                        help='User defined labels instead of default labels from '
                            'file names. '
                            'Multiple labels have to be separated by space, e.g. '
                            '--labels sample1 sample2 sample3',
                        nargs='+')

    optional.add_argument('--plotTitle', '-T',
                          help='Title of the plot, to be printed on top of '
                          'the generated image. Leave blank for no title.',
                          default='')

    optional.add_argument('--plotFileFormat',
                        metavar='FILETYPE',
                        help='Image format type. If given, this option '
                            'overrides the image format based on the plotFile '
                            'ending. The available options are: png, emf, '
                            'eps, pdf and svg.',
                        choices=['png', 'pdf', 'svg', 'eps', 'emf'])

    optional.add_argument(
            '--removeOutliers',
            help='If set, bins with very large counts are removed. '
            'Bins with abnormally high reads counts artificially increase '
            'pearson correlation; that\'s why, by default, bamCorrelate tries '
            'to remove outliers using the median absolute deviation (MAD) '
            'method applying a threshold of 200 to only consider extremely '
            'large deviations from the median. ENCODE blacklist page '
            '(https://sites.google.com/site/anshulkundaje/projects/blacklists) '
            'contains useful information about regions with unusually high counts.',
            action='store_true')

    optional.add_argument('--version', action='version',
                          version='%(prog)s {}'.format(__version__))

    group = parser.add_argument_group('Output optional options')

    group.add_argument('--outFileCorMatrix',
                        help='Save correlation matrix to file.',
                        metavar='FILE',
                        type=argparse.FileType('w'))

    return parser


def heatmap_options():
    """
    Options for generating the correlation heat map
    """
    parser = argparse.ArgumentParser(add_help=False)
    heatmap = parser.add_argument_group('Heat map options')

    heatmap.add_argument('--zMin', '-min',
                         default=None,
                         help='Minimum value for the heat map intensities. '
                            'If not specified the value is set automatically',
                         type=float)

    heatmap.add_argument('--zMax', '-max',
                         default=None,
                         help='Maximum value for the heat map intensities.'
                            'If not specified the value is set automatically',
                         type=float)

    from matplotlib import cm
    color_options = "', '".join([m for m in cm.datad
                                 if not m.endswith('_r')])

    heatmap.add_argument(
        '--colorMap', default='jet',
        metavar='',
        help='Color map to use for the heatmap. Available values can be '
            'seen here: '
            'http://www.astro.lsa.umich.edu/~msshin/science/code/'
            'matplotlib_cm/ The available options are: \'' +
        color_options + '\'')

    heatmap.add_argument('--plotNumbers',
                        help='If set, then the correlation number is plotted '
                          'on top of the heatmap. This option is only valid when plotting a heatmap.',
                        action='store_true',
                        required=False)

    return parser


def main(args):

    corr =  Correlation(args.corData,
                        args.corMethod,
                        labels=args.labels,
                        remove_outliers=args.removeOutliers,
                        log1p=None,
                        skip_zeros=args.skipZeros)

    if args.corMethod=='pearson':
        # test if there are outliers and write a message recommending the removal
        if len(corr.get_outlier_indices(np.asarray(corr.matrix).flatten())) > 0:
            sys.stderr.write("\nOutliers were detected in the data. Consider "
                "using the --removeOutliers parameter to avoid a bias "
                "in the pearson correlation.\n")

    if args.colorMap:
        try:
            plt.get_cmap(args.colorMap)
        except ValueError as error:
            sys.stderr.write(
                "A problem was found. Message: {}\n".format(error))
            exit()

    if args.outFileCorMatrix:
        corr.save_corr_matrix(args.outFileCorMatrix)

    args.plotFile.close()
    if args.whatToPlot == 'scatterplot':
        corr.plot_scatter(args.plotFile.name,
                          plot_title=args.plotTitle,
                          image_format=args.plotFileFormat)
    else:
        corr.plot_correlation(args.plotFile.name,
                              vmax=args.zMax,
                              vmin=args.zMin,
                              colormap=args.colorMap,
                              plot_title=args.plotTitle,
                              image_format=args.plotFileFormat,
                              plot_numbers=args.plotNumbers)


if __name__ == "__main__":
    ARGS = parse_arguments()
    main(ARGS)
